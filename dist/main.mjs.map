{"version":3,"sources":["../src/Sinth.ts","../src/main.ts"],"sourcesContent":["import { Note } from \"./main\";\n\nconst lookAhead = 25.0;\nconst scheduleAheadTime = 0.1;\nlet notesInQueue: Note[] = [];\nlet noteIndex = 0;\nlet timerID: any;\n\nfunction InitPlay(notes: Note[]) {\n  notesInQueue = notes;\n  noteIndex = 0;\n}\n\nlet play: boolean = false;\n\nfunction PlaySequence(\n  aContext: AudioContext,\n  sound: AudioBuffer,\n  tempo: number,\n  notifyStop: () => void): void {\n    const secondsPerBeat = 60.0 / tempo;\n    play = true;\n\n    const nextBeat = (notesInQueue[noteIndex].Beat - 1) * secondsPerBeat;\n    if (aContext.currentTime + scheduleAheadTime >= nextBeat) {\n      scheduleNote(aContext, nextBeat, sound, notesInQueue[noteIndex], secondsPerBeat);\n      noteIndex++;\n      if (noteIndex >= notesInQueue.length) {\n        StopSequence();\n        notifyStop();\n      }\n    }\n\n    if (play) {\n      timerID = setTimeout(() => PlaySequence(aContext, sound, tempo, notifyStop), lookAhead);\n    }\n}\n\nfunction StopSequence(): void {\n  clearTimeout(timerID);\n  noteIndex = 0;\n  play = false;\n}\n\nfunction scheduleNote(aContext: AudioContext, \n                      time: number, \n                      sound: AudioBuffer,\n                      note: Note,\n                      secondsPerBeat: number): void {\n  const source = aContext.createBufferSource();\n  const gainNode = aContext.createGain();\n  gainNode.gain.setValueAtTime(0.25, time);\n  source.buffer = sound;\n  source.playbackRate.value = GetPlaybackRate(69, note.MidiNote);\n  source.connect(gainNode).connect(aContext.destination);\n  source.start(time);\n  gainNode.gain.linearRampToValueAtTime(0, time + (note.Duration * secondsPerBeat));\n}\n\nfunction GetPlaybackRate(sampleNote: number = 69, desiredNote: number): number {\n  return 2 ** ((desiredNote - sampleNote) / 12);\n}\n\nexport { PlaySequence, StopSequence, InitPlay, Note };\n\n\n","// main file for SinthV2\nimport { InitPlay, PlaySequence, StopSequence } from \"./Sinth.js\";\n\nexport module Sinth {\n  export function CreateSinth(): void {}\n\n  export function play(sound: AudioBuffer, tempo: number, callback: () => void): void {\n    const newContext = new AudioContext();\n    PlaySequence(newContext, sound, tempo, callback);\n  }\n\n  export function stop(): void {\n    StopSequence();\n  }\n\n  export function initplay(notes: Note[]): void {\n    InitPlay(notes);\n  }\n}\n\nexport interface Note {\n  Beat: number;\n  Duration: number;\n  MidiNote: number;\n}\n\n"],"mappings":"eAEA,IAAMA,EAAY,GACZC,EAAoB,GACtBC,EAAuB,CAAC,EACxBC,EAAY,EACZC,EAEJ,SAASC,EAASC,EAAe,CAC/BJ,EAAeI,EACfH,EAAY,CACd,CAEA,IAAII,EAAgB,GAEpB,SAASC,EACPC,EACAC,EACAC,EACAC,EAA8B,CAC5B,IAAMC,EAAiB,GAAOF,EAC9BJ,EAAO,GAEP,IAAMO,GAAYZ,EAAaC,CAAS,EAAE,KAAO,GAAKU,EAClDJ,EAAS,YAAcR,GAAqBa,IAC9CC,EAAaN,EAAUK,EAAUJ,EAAOR,EAAaC,CAAS,EAAGU,CAAc,EAC/EV,IACIA,GAAaD,EAAa,SAC5Bc,EAAa,EACbJ,EAAW,IAIXL,IACFH,EAAU,WAAW,IAAMI,EAAaC,EAAUC,EAAOC,EAAOC,CAAU,EAAGZ,CAAS,EAE5F,CAEA,SAASgB,GAAqB,CAC5B,aAAaZ,CAAO,EACpBD,EAAY,EACZI,EAAO,EACT,CAEA,SAASQ,EAAaN,EACAQ,EACAP,EACAQ,EACAL,EAA8B,CAClD,IAAMM,EAASV,EAAS,mBAAmB,EACrCW,EAAWX,EAAS,WAAW,EACrCW,EAAS,KAAK,eAAe,IAAMH,CAAI,EACvCE,EAAO,OAAST,EAChBS,EAAO,aAAa,MAAQE,EAAgB,GAAIH,EAAK,QAAQ,EAC7DC,EAAO,QAAQC,CAAQ,EAAE,QAAQX,EAAS,WAAW,EACrDU,EAAO,MAAMF,CAAI,EACjBG,EAAS,KAAK,wBAAwB,EAAGH,EAAQC,EAAK,SAAWL,CAAe,CAClF,CAEA,SAASQ,EAAgBC,EAAqB,GAAIC,EAA6B,CAC7E,OAAOC,EAAA,GAAOD,EAAcD,GAAc,GAC5C,CC1DO,IAAOG,MAAP,CACE,SAASC,GAAoB,CAAC,CAA9BD,EAAS,YAAAC,EAET,SAASC,EAAKC,EAAoBC,EAAeC,EAA4B,CAClF,IAAMC,EAAa,IAAI,aACvBC,EAAaD,EAAYH,EAAOC,EAAOC,CAAQ,CACjD,CAHOL,EAAS,KAAAE,EAKT,SAASM,GAAa,CAC3BC,EAAa,CACf,CAFOT,EAAS,KAAAQ,EAIT,SAASE,EAASC,EAAqB,CAC5CC,EAASD,CAAK,CAChB,CAFOX,EAAS,SAAAU,IAZJV,MAAA","names":["lookAhead","scheduleAheadTime","notesInQueue","noteIndex","timerID","InitPlay","notes","play","PlaySequence","aContext","sound","tempo","notifyStop","secondsPerBeat","nextBeat","scheduleNote","StopSequence","time","note","source","gainNode","GetPlaybackRate","sampleNote","desiredNote","__pow","Sinth","CreateSinth","play","sound","tempo","callback","newContext","PlaySequence","stop","StopSequence","initplay","notes","InitPlay"]}